 NLP Project: Book Review Sentiment Analysis

A complete NLP pipeline that performs sentiment analysis on user-written book reviews. It includes text preprocessing, automatic sentiment labeling using VADER, training a machine learning model using logistic regression, and evaluating results with visualizations such as confusion matrix heatmaps.

---

Project Overview:

The goal of this project is to classify book reviews as **positive**, **negative**, or **neutral** using Natural Language Processing (NLP) and Machine Learning. We use VADER (Valence Aware Dictionary and sEntiment Reasoner) to label sentiments and train a logistic regression model to predict sentiments for unseen reviews.

---

Repository Structure:

| File / Folder                  | Description |
|-------------------------------|-------------|
| `book review analysis.ipynb`  | Main Jupyter notebook with all code steps, from data cleaning to visualization |
| `Book Reviews.csv`            | Raw dataset of book reviews |
| `README.md`                   | You‚Äôre reading it! Full project guide |
| `requirements.txt` *(opt)*    | Contains required Python libraries |


---
 Key Features

- ‚úÖ Text Cleaning and Preprocessing  
- ‚úÖ Sentiment Labeling using VADER (Positive / Negative / Neutral)  
- ‚úÖ TF-IDF Vectorization (Top 5000 words)  
- ‚úÖ Model Training using Logistic Regression  
- ‚úÖ Accuracy Evaluation  
- ‚úÖ Confusion Matrix Visualization  

---

Dataset:

**File:** `Book Reviews.csv`  
This dataset contains a collection of user-written book reviews.

| Column          | Description                         |
|-----------------|-------------------------------------|
| `Review`        | Raw review text                     |
| *(generated)* `Sentiment` | Auto-labeled as `positive`, `neutral`, or `negative` using VADER |

---

Setup Instructions:


1. Create & Activate Virtual Environment (Optional but Recommended)

python3 -m venv venv
source venv/bin/activate      # Windows: venv\Scripts\activate


2. Install Required Libraries

pip install -r requirements.txt
If you don‚Äôt have requirements.txt, use:

pip install pandas numpy matplotlib seaborn nltk scikit-learn 

Sample Output
Here‚Äôs what a full run of the notebook includes:

Sample Labeled Review:
Input: "This book was an emotional masterpiece ‚Äî couldn‚Äôt stop reading!"
VADER Sentiment Score: compound = 0.89
Label: positive üåû

ü§ñ Model Accuracy:

üîç Accuracy: 83.25%
üìâ Confusion Matrix Heatmap
You can generate and save a confusion matrix plot using:

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.show()
(You can export this plot as confusion_matrix.png and embed it in the README)

Technologies Used
Python 3

Pandas / NumPy ‚Äì Data wrangling

NLTK (VADER) ‚Äì Sentiment scoring

Scikit-learn ‚Äì Machine learning and model evaluation

Matplotlib / Seaborn ‚Äì Visualization

Jupyter Notebook ‚Äì Interactive code execution

Contribution Guidelines:

Feel free to fork this project, create a new branch, and submit a pull request with improvements such as:

Using more advanced models (SVM, Random Forest, etc.)

Adding preprocessing enhancements (lemmatization, n-grams)

Testing with other datasets

UI interface with Gradio/Streamlit

License:
This project is open source under the MIT License. You are free to use, modify, and distribute.

‚≠ê Final Note
If you find this project helpful, please consider giving it a ‚≠ê on GitHub!


---

